// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"
)

// groupService is an autogenerated mock type for the groupService type
type groupService struct {
	mock.Mock
}

// AddUserToGroup provides a mock function with given fields: userId, groupId
func (_m *groupService) AddUserToGroup(userId ds.UserID, groupId string) error {
	ret := _m.Called(userId, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ds.UserID, string) error); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserInGroup provides a mock function with given fields: userId, groupId
func (_m *groupService) CheckUserInGroup(userId ds.UserID, groupId string) (bool, error) {
	ret := _m.Called(userId, groupId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(ds.UserID, string) (bool, error)); ok {
		return rf(userId, groupId)
	}
	if rf, ok := ret.Get(0).(func(ds.UserID, string) bool); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(ds.UserID, string) error); ok {
		r1 = rf(userId, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: group
func (_m *groupService) CreateGroup(group *ds.Group) (*ds.Group, error) {
	ret := _m.Called(group)

	var r0 *ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*ds.Group) (*ds.Group, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(*ds.Group) *ds.Group); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*ds.Group) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupByID provides a mock function with given fields: groupId
func (_m *groupService) DeleteGroupByID(groupId string) error {
	ret := _m.Called(groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupsByUserID provides a mock function with given fields: userId
func (_m *groupService) GetGroupsByUserID(userId ds.UserID) ([]*ds.Group, error) {
	ret := _m.Called(userId)

	var r0 []*ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(ds.UserID) ([]*ds.Group, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(ds.UserID) []*ds.Group); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(ds.UserID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromGroup provides a mock function with given fields: userId, groupId
func (_m *groupService) RemoveUserFromGroup(userId ds.UserID, groupId string) error {
	ret := _m.Called(userId, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ds.UserID, string) error); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroupByID provides a mock function with given fields: group
func (_m *groupService) UpdateGroupByID(group *ds.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewGroupService interface {
	mock.TestingT
	Cleanup(func())
}

// newGroupService creates a new instance of groupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newGroupService(t mockConstructorTestingTnewGroupService) *groupService {
	mock := &groupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
