// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/adharshmk96/stk-auth/internals/account/domain"
	mock "github.com/stretchr/testify/mock"
)

// AccountStorage is an autogenerated mock type for the AccountStorage type
type AccountStorage struct {
	mock.Mock
}

// GetAccountByEmail provides a mock function with given fields: email
func (_m *AccountStorage) GetAccountByEmail(email string) (*domain.Account, error) {
	ret := _m.Called(email)

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Account); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBySessionID provides a mock function with given fields: id
func (_m *AccountStorage) GetAccountBySessionID(id string) (*domain.Account, error) {
	ret := _m.Called(id)

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionByID provides a mock function with given fields: id
func (_m *AccountStorage) GetSessionByID(id string) (*domain.Session, error) {
	ret := _m.Called(id)

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Session, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreAccount provides a mock function with given fields: account
func (_m *AccountStorage) StoreAccount(account *domain.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreSession provides a mock function with given fields: session
func (_m *AccountStorage) StoreSession(session *domain.Session) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSession provides a mock function with given fields: session
func (_m *AccountStorage) UpdateSession(session *domain.Session) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountStorage creates a new instance of AccountStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountStorage {
	mock := &AccountStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
