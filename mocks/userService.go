// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"
)

// userService is an autogenerated mock type for the userService type
type userService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: login
func (_m *userService) Authenticate(login *ds.User) error {
	ret := _m.Called(login)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.User) error); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: user
func (_m *userService) ChangePassword(user *ds.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *userService) CreateUser(user *ds.User) (*ds.User, error) {
	ret := _m.Called(user)

	var r0 *ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*ds.User) (*ds.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*ds.User) *ds.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*ds.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userId
func (_m *userService) GetUserByID(userId string) (*ds.User, error) {
	ret := _m.Called(userId)

	var r0 *ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// newUserService creates a new instance of userService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newUserService(t mockConstructorTestingTnewUserService) *userService {
	mock := &userService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
