// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/adharshmk96/stk-auth/pkg/entities"
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"
)

// AuthenticationService is an autogenerated mock type for the AuthenticationService type
type AuthenticationService struct {
	mock.Mock
}

// AddUserToGroup provides a mock function with given fields: userId, groupId
func (_m *AuthenticationService) AddUserToGroup(userId ds.UserID, groupId string) error {
	ret := _m.Called(userId, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ds.UserID, string) error); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Authenticate provides a mock function with given fields: login
func (_m *AuthenticationService) Authenticate(login *ds.User) error {
	ret := _m.Called(login)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.User) error); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: user
func (_m *AuthenticationService) ChangePassword(user *ds.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserInGroup provides a mock function with given fields: userId, groupId
func (_m *AuthenticationService) CheckUserInGroup(userId ds.UserID, groupId string) (bool, error) {
	ret := _m.Called(userId, groupId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(ds.UserID, string) (bool, error)); ok {
		return rf(userId, groupId)
	}
	if rf, ok := ret.Get(0).(func(ds.UserID, string) bool); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(ds.UserID, string) error); ok {
		r1 = rf(userId, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: group
func (_m *AuthenticationService) CreateGroup(group *ds.Group) (*ds.Group, error) {
	ret := _m.Called(group)

	var r0 *ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*ds.Group) (*ds.Group, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(*ds.Group) *ds.Group); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*ds.Group) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: user
func (_m *AuthenticationService) CreateSession(user *ds.User) (*ds.Session, error) {
	ret := _m.Called(user)

	var r0 *ds.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*ds.User) (*ds.Session, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*ds.User) *ds.Session); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*ds.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *AuthenticationService) CreateUser(user *ds.User) (*ds.User, error) {
	ret := _m.Called(user)

	var r0 *ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*ds.User) (*ds.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*ds.User) *ds.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*ds.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupByID provides a mock function with given fields: groupId
func (_m *AuthenticationService) DeleteGroupByID(groupId string) error {
	ret := _m.Called(groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateJWT provides a mock function with given fields: claims
func (_m *AuthenticationService) GenerateJWT(claims *entities.CustomClaims) (string, error) {
	ret := _m.Called(claims)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.CustomClaims) (string, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(*entities.CustomClaims) string); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entities.CustomClaims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsByUserID provides a mock function with given fields: userId
func (_m *AuthenticationService) GetGroupsByUserID(userId ds.UserID) ([]*ds.Group, error) {
	ret := _m.Called(userId)

	var r0 []*ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(ds.UserID) ([]*ds.Group, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(ds.UserID) []*ds.Group); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(ds.UserID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalUsersCount provides a mock function with given fields:
func (_m *AuthenticationService) GetTotalUsersCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userId
func (_m *AuthenticationService) GetUserByID(userId string) (*ds.User, error) {
	ret := _m.Called(userId)

	var r0 *ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBySessionId provides a mock function with given fields: sessionId
func (_m *AuthenticationService) GetUserBySessionId(sessionId string) (*ds.User, error) {
	ret := _m.Called(sessionId)

	var r0 *ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.User, error)); ok {
		return rf(sessionId)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.User); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetails provides a mock function with given fields: userId
func (_m *AuthenticationService) GetUserDetails(userId ds.UserID) (*ds.User, error) {
	ret := _m.Called(userId)

	var r0 *ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(ds.UserID) (*ds.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(ds.UserID) *ds.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(ds.UserID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: limit, offset
func (_m *AuthenticationService) GetUserList(limit int, offset int) ([]*ds.User, error) {
	ret := _m.Called(limit, offset)

	var r0 []*ds.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*ds.User, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*ds.User); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutUserBySessionId provides a mock function with given fields: sessionId
func (_m *AuthenticationService) LogoutUserBySessionId(sessionId string) error {
	ret := _m.Called(sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserFromGroup provides a mock function with given fields: userId, groupId
func (_m *AuthenticationService) RemoveUserFromGroup(userId ds.UserID, groupId string) error {
	ret := _m.Called(userId, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(ds.UserID, string) error); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroupByID provides a mock function with given fields: group
func (_m *AuthenticationService) UpdateGroupByID(group *ds.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateJWT provides a mock function with given fields: token
func (_m *AuthenticationService) ValidateJWT(token string) (*entities.CustomClaims, error) {
	ret := _m.Called(token)

	var r0 *entities.CustomClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.CustomClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.CustomClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CustomClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthenticationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticationService creates a new instance of AuthenticationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticationService(t mockConstructorTestingTNewAuthenticationService) *AuthenticationService {
	mock := &AuthenticationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
