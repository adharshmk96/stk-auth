// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AuthenticationStore is an autogenerated mock type for the AuthenticationStore type
type AuthenticationStore struct {
	mock.Mock
}

// CheckAccountGroupAssociation provides a mock function with given fields: accountID, groupID
func (_m *AuthenticationStore) CheckAccountGroupAssociation(accountID string, groupID string) (bool, error) {
	ret := _m.Called(accountID, groupID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(accountID, groupID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(accountID, groupID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountByID provides a mock function with given fields: accountID
func (_m *AuthenticationStore) DeleteAccountByID(accountID string) error {
	ret := _m.Called(accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccountGroupAssociation provides a mock function with given fields: accountID, groupID
func (_m *AuthenticationStore) DeleteAccountGroupAssociation(accountID string, groupID string) error {
	ret := _m.Called(accountID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accountID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupByID provides a mock function with given fields: groupID
func (_m *AuthenticationStore) DeleteGroupByID(groupID string) error {
	ret := _m.Called(groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByAccountID provides a mock function with given fields: email
func (_m *AuthenticationStore) GetAccountByAccountID(email string) (*ds.Account, error) {
	ret := _m.Called(email)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByEmail provides a mock function with given fields: email
func (_m *AuthenticationStore) GetAccountByEmail(email string) (*ds.Account, error) {
	ret := _m.Called(email)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBySessionID provides a mock function with given fields: sessionID
func (_m *AuthenticationStore) GetAccountBySessionID(sessionID string) (*ds.Account, error) {
	ret := _m.Called(sessionID)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByUsername provides a mock function with given fields: username
func (_m *AuthenticationStore) GetAccountByUsername(username string) (*ds.Account, error) {
	ret := _m.Called(username)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountList provides a mock function with given fields: limit, offset
func (_m *AuthenticationStore) GetAccountList(limit int, offset int) ([]*ds.Account, error) {
	ret := _m.Called(limit, offset)

	var r0 []*ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*ds.Account, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*ds.Account); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByID provides a mock function with given fields: groupID
func (_m *AuthenticationStore) GetGroupByID(groupID string) (*ds.Group, error) {
	ret := _m.Called(groupID)

	var r0 *ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Group, error)); ok {
		return rf(groupID)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Group); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsByAccountID provides a mock function with given fields: accountID
func (_m *AuthenticationStore) GetGroupsByAccountID(accountID string) ([]*ds.Group, error) {
	ret := _m.Called(accountID)

	var r0 []*ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*ds.Group, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) []*ds.Group); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordResetToken provides a mock function with given fields: token
func (_m *AuthenticationStore) GetPasswordResetToken(token string) (*ds.PasswordResetToken, error) {
	ret := _m.Called(token)

	var r0 *ds.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.PasswordResetToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.PasswordResetToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.PasswordResetToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionByID provides a mock function with given fields: sessionID
func (_m *AuthenticationStore) GetSessionByID(sessionID string) (*ds.Session, error) {
	ret := _m.Called(sessionID)

	var r0 *ds.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Session, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Session); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAccountsCount provides a mock function with given fields:
func (_m *AuthenticationStore) GetTotalAccountsCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateSessionByID provides a mock function with given fields: sessionID
func (_m *AuthenticationStore) InvalidateSessionByID(sessionID string) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAccount provides a mock function with given fields: account
func (_m *AuthenticationStore) SaveAccount(account *ds.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGroup provides a mock function with given fields: group
func (_m *AuthenticationStore) SaveGroup(group *ds.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGroupAssociation provides a mock function with given fields: association
func (_m *AuthenticationStore) SaveGroupAssociation(association *ds.AccountGroupAssociation) error {
	ret := _m.Called(association)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.AccountGroupAssociation) error); ok {
		r0 = rf(association)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePasswordResetToken provides a mock function with given fields: id, token, expiry
func (_m *AuthenticationStore) SavePasswordResetToken(id string, token string, expiry time.Time) error {
	ret := _m.Called(id, token, expiry)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) error); ok {
		r0 = rf(id, token, expiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSession provides a mock function with given fields: session
func (_m *AuthenticationStore) SaveSession(session *ds.Session) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountByID provides a mock function with given fields: account
func (_m *AuthenticationStore) UpdateAccountByID(account *ds.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: group
func (_m *AuthenticationStore) UpdateGroup(group *ds.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthenticationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticationStore creates a new instance of AuthenticationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticationStore(t mockConstructorTestingTNewAuthenticationStore) *AuthenticationStore {
	mock := &AuthenticationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
