// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/adharshmk96/stk-auth/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// GetTotalUsersCount provides a mock function with given fields:
func (_m *AdminService) GetTotalUsersCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetails provides a mock function with given fields: userId
func (_m *AdminService) GetUserDetails(userId entities.UserID) (*entities.User, error) {
	ret := _m.Called(userId)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.UserID) (*entities.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(entities.UserID) *entities.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.UserID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: limit, offset
func (_m *AdminService) GetUserList(limit int, offset int) ([]*entities.User, error) {
	ret := _m.Called(limit, offset)

	var r0 []*entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.User, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.User); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminService(t mockConstructorTestingTNewAdminService) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
