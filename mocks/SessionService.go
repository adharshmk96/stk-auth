// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/adharshmk96/stk-auth/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: user
func (_m *SessionService) CreateSession(user *entities.User) (*entities.Session, error) {
	ret := _m.Called(user)

	var r0 *entities.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.User) (*entities.Session, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entities.User) *entities.Session); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBySessionId provides a mock function with given fields: sessionId
func (_m *SessionService) GetUserBySessionId(sessionId string) (*entities.User, error) {
	ret := _m.Called(sessionId)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.User, error)); ok {
		return rf(sessionId)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutUserBySessionId provides a mock function with given fields: sessionId
func (_m *SessionService) LogoutUserBySessionId(sessionId string) error {
	ret := _m.Called(sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSessionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionService(t mockConstructorTestingTNewSessionService) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
