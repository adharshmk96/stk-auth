// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// tokenStore is an autogenerated mock type for the tokenStore type
type tokenStore struct {
	mock.Mock
}

// GetAccountByPasswordResetToken provides a mock function with given fields: token
func (_m *tokenStore) GetAccountByPasswordResetToken(token string) (*ds.Account, error) {
	ret := _m.Called(token)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordResetToken provides a mock function with given fields: token
func (_m *tokenStore) GetPasswordResetToken(token string) (*ds.PasswordResetToken, error) {
	ret := _m.Called(token)

	var r0 *ds.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.PasswordResetToken, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.PasswordResetToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.PasswordResetToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateResetToken provides a mock function with given fields: token
func (_m *tokenStore) InvalidateResetToken(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePasswordResetToken provides a mock function with given fields: id, token, expiry
func (_m *tokenStore) SavePasswordResetToken(id string, token string, expiry time.Time) error {
	ret := _m.Called(id, token, expiry)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) error); ok {
		r0 = rf(id, token, expiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewTokenStore interface {
	mock.TestingT
	Cleanup(func())
}

// newTokenStore creates a new instance of tokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newTokenStore(t mockConstructorTestingTnewTokenStore) *tokenStore {
	mock := &tokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
