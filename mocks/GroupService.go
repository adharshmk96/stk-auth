// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/adharshmk96/stk-auth/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

// AddUserToGroup provides a mock function with given fields: userId, groupId
func (_m *GroupService) AddUserToGroup(userId entities.UserID, groupId string) error {
	ret := _m.Called(userId, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.UserID, string) error); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserInGroup provides a mock function with given fields: userId, groupId
func (_m *GroupService) CheckUserInGroup(userId entities.UserID, groupId string) (bool, error) {
	ret := _m.Called(userId, groupId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.UserID, string) (bool, error)); ok {
		return rf(userId, groupId)
	}
	if rf, ok := ret.Get(0).(func(entities.UserID, string) bool); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(entities.UserID, string) error); ok {
		r1 = rf(userId, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: group
func (_m *GroupService) CreateGroup(group *entities.Group) (*entities.Group, error) {
	ret := _m.Called(group)

	var r0 *entities.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Group) (*entities.Group, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(*entities.Group) *entities.Group); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Group) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupByID provides a mock function with given fields: groupId
func (_m *GroupService) DeleteGroupByID(groupId string) error {
	ret := _m.Called(groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupsByUserID provides a mock function with given fields: userId
func (_m *GroupService) GetGroupsByUserID(userId entities.UserID) ([]*entities.Group, error) {
	ret := _m.Called(userId)

	var r0 []*entities.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.UserID) ([]*entities.Group, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(entities.UserID) []*entities.Group); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.UserID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromGroup provides a mock function with given fields: userId, groupId
func (_m *GroupService) RemoveUserFromGroup(userId entities.UserID, groupId string) error {
	ret := _m.Called(userId, groupId)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.UserID, string) error); ok {
		r0 = rf(userId, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroupByID provides a mock function with given fields: group
func (_m *GroupService) UpdateGroupByID(group *entities.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGroupService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGroupService(t mockConstructorTestingTNewGroupService) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
