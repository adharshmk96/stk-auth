// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"
)

// accountService is an autogenerated mock type for the accountService type
type accountService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: login
func (_m *accountService) Authenticate(login *ds.Account) error {
	ret := _m.Called(login)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Account) error); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: account
func (_m *accountService) ChangePassword(account *ds.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: account
func (_m *accountService) CreateAccount(account *ds.Account) (*ds.Account, error) {
	ret := _m.Called(account)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*ds.Account) (*ds.Account, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*ds.Account) *ds.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*ds.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByID provides a mock function with given fields: accountId
func (_m *accountService) GetAccountByID(accountId string) (*ds.Account, error) {
	ret := _m.Called(accountId)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(accountId)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountDetails provides a mock function with given fields: accountId
func (_m *accountService) GetAccountDetails(accountId ds.AccountID) (*ds.Account, error) {
	ret := _m.Called(accountId)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(ds.AccountID) (*ds.Account, error)); ok {
		return rf(accountId)
	}
	if rf, ok := ret.Get(0).(func(ds.AccountID) *ds.Account); ok {
		r0 = rf(accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(ds.AccountID) error); ok {
		r1 = rf(accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountList provides a mock function with given fields: limit, offset
func (_m *accountService) GetAccountList(limit int, offset int) ([]*ds.Account, error) {
	ret := _m.Called(limit, offset)

	var r0 []*ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*ds.Account, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*ds.Account); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAccountsCount provides a mock function with given fields:
func (_m *accountService) GetTotalAccountsCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: account, password
func (_m *accountService) ResetPassword(account string, password string) error {
	ret := _m.Called(account, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(account, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPasswordResetEmail provides a mock function with given fields: email, sender
func (_m *accountService) SendPasswordResetEmail(email string, sender func(string, string) error) error {
	ret := _m.Called(email, sender)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string, string) error) error); ok {
		r0 = rf(email, sender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// newAccountService creates a new instance of accountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newAccountService(t mockConstructorTestingTnewAccountService) *accountService {
	mock := &accountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
