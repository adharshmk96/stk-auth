// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"
)

// groupStore is an autogenerated mock type for the groupStore type
type groupStore struct {
	mock.Mock
}

// CheckAccountGroupAssociation provides a mock function with given fields: accountID, groupID
func (_m *groupStore) CheckAccountGroupAssociation(accountID string, groupID string) (bool, error) {
	ret := _m.Called(accountID, groupID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(accountID, groupID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(accountID, groupID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountGroupAssociation provides a mock function with given fields: accountID, groupID
func (_m *groupStore) DeleteAccountGroupAssociation(accountID string, groupID string) error {
	ret := _m.Called(accountID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accountID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupByID provides a mock function with given fields: groupID
func (_m *groupStore) DeleteGroupByID(groupID string) error {
	ret := _m.Called(groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupByID provides a mock function with given fields: groupID
func (_m *groupStore) GetGroupByID(groupID string) (*ds.Group, error) {
	ret := _m.Called(groupID)

	var r0 *ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Group, error)); ok {
		return rf(groupID)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Group); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsByAccountID provides a mock function with given fields: accountID
func (_m *groupStore) GetGroupsByAccountID(accountID string) ([]*ds.Group, error) {
	ret := _m.Called(accountID)

	var r0 []*ds.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*ds.Group, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) []*ds.Group); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveGroup provides a mock function with given fields: group
func (_m *groupStore) SaveGroup(group *ds.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGroupAssociation provides a mock function with given fields: association
func (_m *groupStore) SaveGroupAssociation(association *ds.AccountGroupAssociation) error {
	ret := _m.Called(association)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.AccountGroupAssociation) error); ok {
		r0 = rf(association)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: group
func (_m *groupStore) UpdateGroup(group *ds.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewGroupStore interface {
	mock.TestingT
	Cleanup(func())
}

// newGroupStore creates a new instance of groupStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newGroupStore(t mockConstructorTestingTnewGroupStore) *groupStore {
	mock := &groupStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
