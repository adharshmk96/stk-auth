// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/adharshmk96/stk-auth/internals/account/domain"
	mock "github.com/stretchr/testify/mock"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountService) CreateAccount(account *domain.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndSession provides a mock function with given fields: session
func (_m *AccountService) EndSession(session string) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for EndSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByEmail provides a mock function with given fields: email
func (_m *AccountService) GetAccountByEmail(email string) (*domain.Account, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByEmail")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Account); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionAccount provides a mock function with given fields: sessionId
func (_m *AccountService) GetSessionAccount(sessionId string) (*domain.Account, error) {
	ret := _m.Called(sessionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionAccount")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Account, error)); ok {
		return rf(sessionId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Account); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSession provides a mock function with given fields: account
func (_m *AccountService) StartSession(account *domain.Account) (*domain.Session, error) {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Account) (*domain.Session, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*domain.Account) *domain.Session); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
