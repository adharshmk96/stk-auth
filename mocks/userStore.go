// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ds "github.com/adharshmk96/stk-auth/pkg/entities/ds"

	mock "github.com/stretchr/testify/mock"
)

// userStore is an autogenerated mock type for the userStore type
type userStore struct {
	mock.Mock
}

// DeleteUserByID provides a mock function with given fields: userID
func (_m *userStore) DeleteUserByID(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTotalUsersCount provides a mock function with given fields:
func (_m *userStore) GetTotalUsersCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *userStore) GetUserByEmail(email string) (*ds.Account, error) {
	ret := _m.Called(email)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserID provides a mock function with given fields: email
func (_m *userStore) GetUserByUserID(email string) (*ds.Account, error) {
	ret := _m.Called(email)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *userStore) GetUserByUsername(username string) (*ds.Account, error) {
	ret := _m.Called(username)

	var r0 *ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ds.Account, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *ds.Account); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: limit, offset
func (_m *userStore) GetUserList(limit int, offset int) ([]*ds.Account, error) {
	ret := _m.Called(limit, offset)

	var r0 []*ds.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*ds.Account, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*ds.Account); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ds.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: user
func (_m *userStore) SaveUser(user *ds.Account) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Account) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserByID provides a mock function with given fields: user
func (_m *userStore) UpdateUserByID(user *ds.Account) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ds.Account) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// newUserStore creates a new instance of userStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newUserStore(t mockConstructorTestingTnewUserStore) *userStore {
	mock := &userStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
