// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/adharshmk96/auth-server/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserStore) GetUserByID(id int64) (*entities.User, error) {
	ret := _m.Called(id)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: user
func (_m *UserStore) SaveUser(user *entities.User) (entities.UserID, error) {
	ret := _m.Called(user)

	var r0 entities.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.User) (entities.UserID, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entities.User) entities.UserID); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.UserID)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStore(t mockConstructorTestingTNewUserStore) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
